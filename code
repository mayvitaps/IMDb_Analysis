# IMDB Analysis

## Prepare Phase
### Pull the data from local drive

df <- read.csv("imdb_top_1000.csv")
View(df)

### View all column data types
colnames(df)
column_types <- sapply(df, class)
View(column_types)

df2 <- df

### Install and open the libraries

install.packages("tidyverse")
install.packages("dplyr")
install.packages("corrplot")

library(tidyverse)
library(dplyr)
library(ggplot2)
library(corrplot)

## Process Phase
### Drop Poster Link, Genre, Overview, and Gross column from the dataset

df2 <- df2[, !colnames(df2) %in% c("Poster_Link", "Genre", "Overview", "Gross")]

### Remove duplicate rows
df2 <- distinct(df2)


### Remove rows with Null values
df2 <- na.omit(df2)

### Remove " " (space) and "min" character on Runtime column and change the data type to Numeric
df2 <- df2 %>%
  mutate(Runtime = str_replace_all(Runtime, "min", " "))

class(df3$Runtime) #char
df3$Runtime <- as.numeric(df3$Runtime)
class(df3$Runtime) #numeric

### Filter only some values of movie Certificate
df2 <- df2 %>%
filter(Certificate %in% c("A", "G", "PG", "PG-13", "R", "U", "UA"))

### Change data type IMDB RATING
df2$IMDB_Rating <- as.numeric(df2$IMDB_Rating)

### Change data type Released_Year, but first see the unique data if any alphabetical values
unique(df2$Released_Year)

### Remove rows contain with PG value
df2 <- df2 %>%
filter(Released_Year != "PG")
df2$Released_Year <- as.numeric(df2$Released_Year)

### Filter only year 1990-2020
df2 <- df2 %>%
 filter(Released_Year >= 1990 & Released_Year <= 2020)

### Save the latest data into the local drive
imdb_1990_to_2020 <- df2
write.csv(imdb_1990_to_2020, file = "imdb_1990_to_2020.csv", row.names = FALSE)

### All the data cleaned, and ready to be analyzed

ggplot(movies_df, aes(x = released_year, y = imdb_rating)) +
  geom_point() +
  labs(title = "IMDb Ratings by Year", 
  x = "Year",
       y = "IMDb Rating") + theme_minimal()

## Analysis & Visualization Phase

## 1. Descriptive Statistics

### Find mean, median, and mode of Runtime

mean_runtime <- mean(imdb_1990_to_2020$Runtime)
print(mean_runtime)

median_runtime <- median(imdb_1990_to_2020$Runtime)
print(median_runtime)

get_mode <- function(v) {
  uniq_v <- unique(v)
  uniq_v[which.max(tabulate(match(v, uniq_v)))]
  }
mode_runtime <- get_mode(imdb_1990_to_2020$Runtime)
print(mode_runtime)

### mean_runtime = 123.912 min
### median_runtime = 121 min
### mode_runtime = 101 min

### Find mean, median, and mode of IMDb Rating

mean_rating <- mean(imdb_1990_to_2020$IMDB_Rating)
print(mean_rating)

median_rating <- median(imdb_1990_to_2020$IMDB_Rating)
print(median_rating)

get_mode <- function(v) {
  uniq_v <- unique(v)
  uniq_v[which.max(tabulate(match(v, uniq_v)))]
}
mode_rating <- get_mode(imdb_1990_to_2020$IMDB_Rating)
print(mode_rating)

### mean_rating = 7.91
### median_rating = 7.8
### mode_rating = 7.7

### Find mean, median, and mode of Meta Score

mean_metascore <- mean(imdb_1990_to_2020$Meta_score)
print(mean_metascore)

median_metascore <- median(imdb_1990_to_2020$Meta_score)
print(median_metascore)

get_mode <- function(v) {
  uniq_v <- unique(v)
  uniq_v[which.max(tabulate(match(v, uniq_v)))]
}
mode_metascore <- get_mode(imdb_1990_to_2020$Meta_score)
print(mode_metascore)

### mean_metascore = 75.14
### median_metascore = 76
### mode_metascore = 76

### Find mean, median, and mode of Vote

mean_vote <- mean(imdb_1990_to_2020$No_of_Votes)
print(mean_vote)

median_vote <- median(imdb_1990_to_2020$No_of_Votes)
print(median_vote)

get_mode <- function(v) {
  uniq_v <- unique(v)
  uniq_v[which.max(tabulate(match(v, uniq_v)))]
}
mode_vote <- get_mode(imdb_1990_to_2020$No_of_Votes)
print(mode_vote)

### mean_vote = 391,934.2
### median_vote = 285,026
### mode_vote = 2,343,110

### Histogram for IMDb ratings
ggplot(imdb_1990_to_2020, aes(x = IMDB_Rating)) + 
  geom_histogram(binwidth = 0.5, fill = "pink", color = "white", alpha = 0.7) + 
  labs(title = "Histogram of IMDb Ratings", x = "IMDb Ratings", y = "Frequency") + theme_minimal()

### Histogram for Meta Score
ggplot(imdb_1990_to_2020, aes(x = Meta_score)) + 
  geom_histogram(binwidth = 0.5, fill = "darkseagreen", color = "white", alpha = 0.7) + 
  labs(title = "Histogram of Meta Score", x = "Meta Score", y = "Frequency") + theme_minimal()

## 2. Trend Analysis


### Calculation of Average IMDb Rating and Number of Votes by year

average_trends <- imdb_1990_to_2020 %>% 
  group_by(Released_Year) %>% 
  summarise(
    Avg_IMDb_Rating = mean(IMDB_Rating),
    Avg_No_of_Votes = mean(No_of_Votes)
  )
print(average_trends)
View(average_trends)

###code
ggplot(average_trends, aes(x = Released_Year, y = Avg_IMDb_Rating)) +
  geom_point(color = "brown4") +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "darkgoldenrod") + 
  labs(title = "Average IMDb Rating Over the Years",
       x = "Released Year",
       y = "Average IMDb Rating") +
  theme_minimal()

ggplot(average_trends, aes(x = Released_Year, y = Avg_No_of_Votes)) +
  geom_point(color = "darkgoldenrod2") +  # Scatter plot points
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "orange") +  # Linear regression line
  labs(title = "Average Number of Votes Over the Years",
       x = "Released Year",
       y = "Average Number of Votes") +
  theme_minimal()

### combine plot
ggplot(average_trends) +
  geom_point(aes(x = Released_Year, y = Avg_IMDb_Rating), color = "blue", size = 3, shape = 19) +  # Scale for visibility
  geom_smooth(aes(x = Released_Year, y = Avg_IMDb_Rating ), method = "lm", formula = y ~ x, se = FALSE, color = "red") +  # Regression line for IMDb Rating
  # Points for average number of votes
  geom_point(aes(x = Released_Year, y = Avg_No_of_Votes / 100000), color = "green", size = 3, shape = 17) +  # Scale for visibility
  geom_smooth(aes(x = Released_Year, y = Avg_No_of_Votes / 100000), method = "lm", formula = y ~ x, se = FALSE, color = "orange") +  # Regression line for Votes
  # Labels and scales
  labs(title = "Released Year vs. Average IMDb Rating and Average Number of Votes",
       x = "Released Year",
       y = "Values",
       subtitle = "Average IMDb Rating (Blue) and Average Number of Votes (Green)") +
  scale_y_continuous(sec.axis = sec_axis(~ . * 1000, name = "Average Number of Votes (in thousands)")) +
  theme_minimal()


### Count the number of movies released each year and Visualize with Bar Chart & Scatter Plot  
movies_per_year <- imdb_1990_to_2020 %>%
  group_by(Released_Year) %>%
  summarise(Number_of_Movies = n())
print(movies_per_year)
View(movies_per_year)

ggplot(movies_per_year, aes(x = factor(Released_Year), y = Number_of_Movies)) +
  geom_bar(stat = "identity", fill = "pink", color = "darkseagreen", alpha = 0.7) +
  labs(title = "Number of Movies Released Each Year",
       x = "Year",
       y = "Number of Movies") +
  theme_minimal()
 
ggplot(imdb_1990_to_2020, aes(x = Released_Year, y = IMDB_Rating))+
  geom_point(color = "bisque4", size = 3, alpha = 0.7) +
  labs(title = "Scatter Plot of IMDb Ratings vs. Released Year",
       x = "Released Year",
       y = "IMDb Rating") +
  theme_minimal()

## 3. Correlation Analysis

###Assess the correlation between numerical variables (e.g., runtime, IMDb rating, metascore, number of votes) to identify potential relationships.
numerical_df <- imdb_1990_to_2020 %>%
  select(IMDB_Rating, No_of_Votes, Runtime, Meta_score)

correlation_matrix <- cor(numerical_df)
View(correlation_matrix)

plot.new()
dev.off()

corrplot(correlation_matrix, method = "circle", type = "upper", 
tl.col = "black", tl.srt = 45, tl.cex = 0.8, title = "Correlation Matrix", mar = c(0,0,1,0))

### Investigate which variables are most strongly correlated with IMDb ratings
corrplot(correlation_matrix, method = "circle", type = "full", tl.col = "black", tl.srt = 45, 
title = "Correlation Matrix of IMDb Ratings and Influencing Factors", mar = c(0, 0, 1, 0))
model <- lm(IMDB_Rating ~ Runtime + Meta_score + No_of_Votes, data = df)
summary(model)

## 4. Categorical Analysis

### Analyze how the certificate (e.g., PG, R) affects IMDb ratings or number of votes

### Boxplot for IMDb ratings by certificate

ggplot(df, aes(x = Certificate, y = IMDB_Rating)) +
  geom_boxplot(fill = "lightblue") +
  labs(title = "IMDb Ratings by Certificate",
       x = "Certificate",
       y = "IMDb Rating") +
  theme_minimal()


### Boxplot for Number of Votes by Certificate
ggplot(df, aes(x = Certificate, y = No_of_Votes)) +
  geom_boxplot(fill = "lightgreen") +
  labs(title = "Number of Votes by Certificate",
       x = "Certificate",
       y = "Number of Votes") +
  theme_minimal()

### Show top 10 Directors based on Average No. of Votes

average_votes_director <- imdb_1990_to_2020 %>%
  group_by(Director) %>%
  summarise(Average_Votes = mean(No_of_Votes, na.rm = TRUE)) %>%
  arrange(desc(Average_Votes))

top_10_directors <- average_votes_director %>%
  top_n(10, Average_Votes)

ggplot(top_10_directors, aes(x = reorder(Director, Average_Votes), y = Average_Votes)) +
  geom_bar(stat = "identity", fill = "pink3") +
  labs(title = "Top 10 Directors by Average Number of Votes",
       x = "Director",
       y = "Average Number of Votes") +
  theme_minimal() +
  coord_flip()

### Investigate if certain directors or actors tend to have higher ratings. 
### This could involve grouping data by director/actor and calculating average ratings.

average_rating_director <- imdb_1990_to_2020 %>%
  group_by(Director) %>%
  summarise(Average_IMDb_Rating = mean(IMDB_Rating, na.rm = TRUE)) %>%
  arrange(desc(Average_IMDb_Rating))
print(average_rating_director)

ggplot(average_rating_director, aes(x = reorder(Director, Average_IMDb_Rating), y = Average_IMDb_Rating)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Average IMDb Ratings by Director",
       x = "Director",
       y = "Average IMDb Rating") +
  theme_minimal() +
  coord_flip()









